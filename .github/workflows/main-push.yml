name: Main Push Workflow
on:
  push:
    branches:
      - main

jobs:
  build:
    name: Java-Build on Push
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 19
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'
          cache: maven
      - name: Connect to PostgreSQL
        uses: harmon758/postgresql-action@v1
        with:
          postgresql db: 'cjoshi'
          postgresql user: 'cjoshi'
          postgresql password: 'cjoshi'
      - name: Build with Maven
        working-directory: Assignment3
        run: mvn clean install
      - name: Running test cases
        working-directory: Assignment3
        run: mvn test -Dtest=IntegrationTest

      - name: Building Jar file
        working-directory: Assignment3
        run: mvn package -Dmaven.test.skip=true
      - name: Checking AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: us-east-1

      - name: Installing packer provisioners
        working-directory: Assignment3/packer
        run: packer init packer.pkr.hcl

      - name: Formatting packer
        working-directory: Assignment3/packer
        run: packer fmt -check packer.pkr.hcl

      - name: Running Packer template validation
        working-directory: Assignment3/packer
        run: packer build -color=false -on-error=abort packer.pkr.hcl
  refresh-instances:
    needs: build
    runs-on: ubuntu-latest
    name: refresh instances with the latest AMI
    env:
      EC2_LAUNCH_TEMPLATE: ${{ vars.EC2_LAUNCH_TEMPLATE }}
      EC2_AUTOSCALING_GROUP: ${{ vars.EC2_ASG }}
    steps:
      - name: setup AWS demo account credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID_DEMO }}
          aws-region: us-east-1
      - name: get the latest AMI id
        run: |
          AMI_ID=$(aws ec2 describe-images \
          --filters "Name=name,Values=csye-6225*" \
          --query "Images | sort_by(@, &CreationDate) | [-1].ImageId" \
          --output text)
          echo "AMI_ID=$AMI_ID" >> $GITHUB_ENV
      - name: print env variables
        run: |
          echo "EC2_LAUNCH_TEMPLATE: $EC2_LAUNCH_TEMPLATE"
          echo "EC2_AUTOSCALING_GROUP: $EC2_AUTOSCALING_GROUP"
          echo "AMI_ID: $AMI_ID"
      - name: create new launch template version
        run: |
          aws ec2 create-launch-template-version \
          --launch-template-name $EC2_LAUNCH_TEMPLATE \
          --launch-template-data ImageId=$AMI_ID \
          --source-version 1
      - name: refresh instances
        run: |
          aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $EC2_AUTOSCALING_GROUP \
      - name: wait on instance refresh completion
        run: |
          asg_name="<your-auto-scaling-group-name>"
          while true; do
              refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ env.EC2_AUTOSCALING_GROUP }} --query 'InstanceRefreshes[0].Status' --output text)
          
              if [ "$refresh_status" == "Successful" ]; then
                  echo "Instance refresh completed successfully."
                  break
              elif [ "$refresh_status" == "Failed" ]; then
                  echo "Instance refresh failed."
                  exit 1
              else
                  echo "Instance refresh in progress..."
                  sleep 30
              fi
          done


